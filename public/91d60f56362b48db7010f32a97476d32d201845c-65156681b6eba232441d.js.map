{"version":3,"file":"91d60f56362b48db7010f32a97476d32d201845c-65156681b6eba232441d.js","mappings":"2m5FAmBA,OACIA,iBAjBJ,SAA0BC,GACtB,GAAKA,EAEL,OAAO,QAAgB,EAAaA,EACxC,EAcIC,gBAZJ,WACI,OAAO,CACX,EAWIC,cAVJ,SAAuBC,GACnB,OAAOA,EAAUC,MAAK,CAACC,EAAGC,KACf,QAAQD,EAAGC,GAAIC,GACXA,EAAOP,WAG1B,E,+CCoBA,MACIQ,aApCG,WACH,OAAO,CACX,EAmCIC,mBAjCG,SAA4BC,EAAc,IAC7C,OAAKA,EAGU,EAAUC,QAAQC,GACtBA,EAAMF,cAAgBA,IAEnBN,KAAK,MALR,EAMf,EA0BIS,yBAzBG,SAAkCC,EAAWJ,GAChD,GAAKI,GAEAJ,EAEL,OAAO,QAA8B,EAAWI,EAAWJ,EAC/D,EAoBIK,eAlBG,SAAwBf,GAG3B,GADAgB,QAAQC,KAAK,kHACRjB,EAEL,OAAO,QAAgB,EAAWA,EACtC,EAaIE,cAZJ,SAAuBC,GACnB,OAAOA,EAAUC,MAAK,CAACC,EAAGC,KACf,QAAQD,EAAGC,GAAIC,GACX,GAAGA,EAAOG,eAAeH,EAAOP,aAGnD,E,wGCrCO,MAAMkB,EAAkB,CAACC,EAAQC,KACpC,GAAIA,GAAkB,MAAVD,EAAgB,CACxB,MAAME,EAAQF,EAAOG,WAAWC,GACrBA,EAAEvB,UAAYoB,IAEzB,OAAkB,IAAXC,EAAeF,EAAOE,QAASG,CAC1C,CACgB,EAEPC,EAAgC,CAACN,EAAQC,EAAMV,KACxD,GAAIU,GAAQV,GAAyB,MAAVS,EAAgB,CACvC,MAAME,EAAQF,EAAOG,WAAWC,GACrBA,EAAEvB,UAAYoB,GAAQG,EAAEb,cAAgBA,IAEnD,OAAkB,IAAXW,EAAeF,EAAOE,QAASG,CAC1C,CACgB,EAEb,SAASE,EAAoBnB,GAChC,OAAOA,EAAOoB,IAClB,CACO,MAAMC,EAAU,CAACvB,EAAGC,EAE3BuB,EAAeH,IACPG,EAAaxB,GAAKwB,EAAavB,IACvB,EACRuB,EAAaxB,GAAKwB,EAAavB,GACxB,EACJ,C","sources":["webpack://gatsby-starter-default/./node_modules/country-state-city/lib/country.js","webpack://gatsby-starter-default/./node_modules/country-state-city/lib/state.js","webpack://gatsby-starter-default/./node_modules/country-state-city/lib/utils/index.js"],"sourcesContent":["import countryList from './assets/country.json';\nimport { compare, findEntryByCode } from './utils';\n// Get a country by isoCode.\nfunction getCountryByCode(isoCode) {\n    if (!isoCode)\n        return undefined;\n    return findEntryByCode(countryList, isoCode);\n}\n// Get a list of all countries.\nfunction getAllCountries() {\n    return countryList;\n}\nfunction sortByIsoCode(countries) {\n    return countries.sort((a, b) => {\n        return compare(a, b, (entity) => {\n            return entity.isoCode;\n        });\n    });\n}\nexport default {\n    getCountryByCode,\n    getAllCountries,\n    sortByIsoCode,\n};\n","import stateList from './assets/state.json';\nimport { findEntryByCode, findStateByCodeAndCountryCode, compare } from './utils';\n// Get a list of all states.\nexport function getAllStates() {\n    return stateList;\n}\n// Get a list of states belonging to a specific country.\nexport function getStatesOfCountry(countryCode = '') {\n    if (!countryCode)\n        return [];\n    // get data from file or cache\n    const states = stateList.filter((value) => {\n        return value.countryCode === countryCode;\n    });\n    return states.sort(compare);\n}\nexport function getStateByCodeAndCountry(stateCode, countryCode) {\n    if (!stateCode)\n        return undefined;\n    if (!countryCode)\n        return undefined;\n    return findStateByCodeAndCountryCode(stateList, stateCode, countryCode);\n}\n// to be deprecate\nexport function getStateByCode(isoCode) {\n    // eslint-disable-next-line no-console\n    console.warn(`WARNING! 'getStateByCode' has been deprecated, please use the new 'getStateByCodeAndCountry' function instead!`);\n    if (!isoCode)\n        return undefined;\n    return findEntryByCode(stateList, isoCode);\n}\nfunction sortByIsoCode(countries) {\n    return countries.sort((a, b) => {\n        return compare(a, b, (entity) => {\n            return `${entity.countryCode}-${entity.isoCode}`;\n        });\n    });\n}\nexport default {\n    getAllStates,\n    getStatesOfCountry,\n    getStateByCodeAndCountry,\n    getStateByCode,\n    sortByIsoCode,\n};\n","export const findEntryByCode = (source, code) => {\n    if (code && source != null) {\n        const codex = source.findIndex((c) => {\n            return c.isoCode === code;\n        });\n        return codex !== -1 ? source[codex] : undefined;\n    }\n    return undefined;\n};\nexport const findStateByCodeAndCountryCode = (source, code, countryCode) => {\n    if (code && countryCode && source != null) {\n        const codex = source.findIndex((c) => {\n            return c.isoCode === code && c.countryCode === countryCode;\n        });\n        return codex !== -1 ? source[codex] : undefined;\n    }\n    return undefined;\n};\nexport function defaultKeyToCompare(entity) {\n    return entity.name;\n}\nexport const compare = (a, b, \n// eslint-disable-next-line no-unused-vars\nkeyToCompare = defaultKeyToCompare) => {\n    if (keyToCompare(a) < keyToCompare(b))\n        return -1;\n    if (keyToCompare(a) > keyToCompare(b))\n        return 1;\n    return 0;\n};\nexport const convertArrayToObject = (keys, arr) => {\n    const result = arr.map((subArr) => {\n        return Object.fromEntries(keys.map((key, index) => [key, subArr[index]]));\n    });\n    return result;\n};\n"],"names":["getCountryByCode","isoCode","getAllCountries","sortByIsoCode","countries","sort","a","b","entity","getAllStates","getStatesOfCountry","countryCode","filter","value","getStateByCodeAndCountry","stateCode","getStateByCode","console","warn","findEntryByCode","source","code","codex","findIndex","c","undefined","findStateByCodeAndCountryCode","defaultKeyToCompare","name","compare","keyToCompare"],"sourceRoot":""}